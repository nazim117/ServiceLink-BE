name: Java CI with Gradle

env:
  SPRING_DATASOURCE_URL: ${{ secrets.SPRING_DATASOURCE_URL }}
  SPRING_DATASOURCE_USERNAME: ${{ secrets.SPRING_DATASOURCE_USERNAME }}
  SPRING_DATASOURCE_PASSWORD: ${{ secrets.SPRING_DATASOURCE_PASSWORD }}
  SPRING_FLYWAY_URL: ${{ secrets.SPRING_FLYWAY_URL }}
  SPRING_FLYWAY_USER: ${{ secrets.SPRING_FLYWAY_USER }}
  SPRING_FLYWAY_PASSWORD: ${{ secrets.SPRING_FLYWAY_PASSWORD }}
  JWT_TOKEN: ${{ secrets.JWT_TOKEN }}

  AWS_REGION: eu-central-1                   # set this to your preferred AWS region, e.g. us-west-1
  ECR_REPOSITORY: servicelink-repo           # set this to your Amazon ECR repository name
  ECS_SERVICE: servicelink-be-service                 # set this to your Amazon ECS service name
  ECS_CLUSTER: servicelink-cluster                 # set this to your Amazon ECS cluster name
  ECS_TASK_DEFINITION: servicelink-be-task-definition # set this to the path to your Amazon ECS task definition
  # file, e.g .aws/task-definition.json
  CONTAINER_NAME: servicelink-be-container           # set this to the name of the container in the
  # containerDefinitions section of your task definition

  DB_HOST: ${{ secrets.DB_HOST }}
  DB_PORT: ${{ secrets.DB_PORT }}
  DB_NAME: ${{ secrets.DB_NAME }}
  DB_USER: ${{ secrets.DB_USER }}
  DB_PASS: ${{ secrets.DB_PASS }}

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache Gradle dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            gradle-${{ runner.os }}-

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: Build with Gradle
        run: ./gradlew build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v2
        with:
          name: build-artifacts
          path: build/libs/ServiceLink-BE-0.0.1-SNAPSHOT.jar

  test:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Download build artifacts
        uses: actions/download-artifact@v2
        with:
          name: build-artifacts
          path: build/libs

      - name: Cache Gradle dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            gradle-${{ runner.os }}-

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: Run tests with Gradle
        run: ./gradlew test

  docker:
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v2
        with:
          name: build-artifacts
          path: build/libs

      - name: Build Docker image
        run: |
          docker build . --file Dockerfile --tag servicelink-backend:$(date +%s)

  deploy:
    name: Deploy to AWS
    runs-on: ubuntu-latest
    needs: docker
    environment: staging

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      - name: Download build artifacts
        uses: actions/download-artifact@v2
        with:
          name: build-artifacts
          path: build/libs

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_ENV

      - name: Fetch the current task definition
        id: get-task
        run: |
          TASK_DEFINITION=$(aws ecs describe-task-definition --task-definition ${{ env.ECS_TASK_DEFINITION }})
          echo "TASK_DEFINITION_JSON=$TASK_DEFINITION" >> $GITHUB_ENV

      - name: Update task definition with new environment variables and image
        id: update-task-def
        run: |
          NEW_TASK_DEF=$(echo $TASK_DEFINITION_JSON | jq '.taskDefinition | .containerDefinitions[0].image="${{ steps.build-image.outputs.image }}" | .containerDefinitions[0].environment += [{"name":"JWT_TOKEN","value":"${{ secrets.JWT_TOKEN }}"},{"name":"DB_HOST","value":"${{ secrets.DB_HOST }}"},{"name":"DB_PORT","value":"${{ vars.DB_PORT }}"},{"name":"DB_NAME","value":"${{ vars.DB_NAME }}"},{"name":"DB_USER","value":"${{ vars.DB_USER }}"},{"name":"DB_PASS","value":"${{ secrets.DB_PASS }}"}]')
          REGISTERED_DEF=$(aws ecs register-task-definition --cli-input-json "$NEW_TASK_DEF")
          NEW_REVISION=$(echo $REGISTERED_DEF | jq -r '.taskDefinition.taskDefinitionArn')
          echo "NEW_TASK_DEF_ARN=$NEW_REVISION" >> $GITHUB_ENV

      - name: Update ECS service to use new task definition
        run: |
          aws ecs update-service --cluster ${{ env.ECS_CLUSTER }} --service ${{ env.ECS_SERVICE }} --task-definition $NEW_TASK_DEF_ARN --force-new-deployment
