name: Java CI with Gradle

env:
  SPRING_DATASOURCE_URL: ${{ secrets.SPRING_DATASOURCE_URL }}
  SPRING_DATASOURCE_USERNAME: ${{ secrets.SPRING_DATASOURCE_USERNAME }}
  SPRING_DATASOURCE_PASSWORD: ${{ secrets.SPRING_DATASOURCE_PASSWORD }}
  SPRING_FLYWAY_URL: ${{ secrets.SPRING_FLYWAY_URL }}
  SPRING_FLYWAY_USER: ${{ secrets.SPRING_FLYWAY_USER }}
  SPRING_FLYWAY_PASSWORD: ${{ secrets.SPRING_FLYWAY_PASSWORD }}
  JWT_TOKEN: ${{ secrets.JWT_TOKEN }}

  AWS_REGION: eu-central-1                   # set this to your preferred AWS region, e.g. us-west-1
  ECR_REPOSITORY: servicelink-repo           # set this to your Amazon ECR repository name
  ECS_SERVICE: servicelink-be-service                 # set this to your Amazon ECS service name
  ECS_CLUSTER: servicelink-cluster                 # set this to your Amazon ECS cluster name
  ECS_TASK_DEFINITION: servicelink-be-task-definition # set this to the path to your Amazon ECS task definition
  # file, e.g .aws/task-definition.json
  CONTAINER_NAME: servicelink-be-container           # set this to the name of the container in the
  # containerDefinitions section of your task definition

  DB_HOST: ${{ secrets.DB_HOST }}
  DB_PORT: ${{ secrets.DB_PORT }}
  DB_NAME: ${{ secrets.DB_NAME }}
  DB_USER: ${{ secrets.DB_USER }}
  DB_PASS: ${{ secrets.DB_PASS }}

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache Gradle dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            gradle-${{ runner.os }}-

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: Build with Gradle
        run: ./gradlew build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v2
        with:
          name: build-artifacts
          path: build/libs/ServiceLink-BE-0.0.1-SNAPSHOT.jar

  test:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Download build artifacts
        uses: actions/download-artifact@v2
        with:
          name: build-artifacts
          path: build/libs

      - name: Cache Gradle dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            gradle-${{ runner.os }}-

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: Run tests with Gradle
        run: ./gradlew test

  docker:
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v2
        with:
          name: build-artifacts
          path: build/libs

      - name: Build Docker image
        run: |
          docker build . --file Dockerfile --tag servicelink-backend:$(date +%s)

  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        run: |
          IMAGE_URI=123456789012.dkr.ecr.us-west-2.amazonaws.com/my-repo:${{ github.sha }}
          docker build -t $IMAGE_URI .
          docker push $IMAGE_URI
          echo "::set-output name=image::$IMAGE_URI"

      - name: Render Amazon ECS task definition
        id: render-task-definition
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ github.workspace }}/task-definition-template.json
          container-name: my-container
          image: ${{ steps.build-image.outputs.image }}
          environment-variables: >
            JWT_TOKEN,${{ secrets.JWT_TOKEN }}
            DB_HOST,${{ secrets.DB_HOST }}
            DB_PORT,${{ env.DB_PORT }}
            DB_NAME,${{ env.DB_NAME }}
            DB_USER,${{ env.DB_USER }}
            DB_PASS,${{ secrets.DB_PASS }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          service: my-service
          cluster: my-cluster
          task-definition: ${{ steps.render-task-definition.outputs.task-definition }}